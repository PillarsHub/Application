import React from 'react';
import PropTypes from 'prop-types';
import { useQuery, gql } from "@apollo/client";
import DataLoading from '../../components/dataLoading';
import DataError from '../../components/dataError';
import EmptyContent from '../../components/emptyContent';
import LocalDate from '../../util/LocalDate';

var GET_DATA = gql`query ($orderId: String!)  {
  orders(orderId: {eq: $orderId}){
    id
    total
    sources {
      id
      value
      nodeId
      sourceGroupId
      date
      bonusDetails{
        period{
          id
          begin
          end
        }
        nodeId
        amount
        percent
        bonusId
        bonusTitle
        volume
        released
        commissionDate
        level
        customer{
          id
          fullName
        }
      }
    }
  }
}`;

const OrderDetailBonuses = ({ orderId }) => {
  const { loading, error, data } = useQuery(GET_DATA, {
    variables: { orderId: orderId }
  });

  const processedBonusDetails = data?.orders?.[0]?.sources
    ?.flatMap(source =>
      (source.bonusDetails || [])
        .filter(detail => detail.amount != 0)
        .map(detail => ({
          ...detail,
          sourceGroupId: source.sourceGroupId,
          sourceAmount: source.value,
          periodId: detail.period?.id
        }))
    )
    ?.sort((a, b) => {
      if (a.sourceGroupId !== b.sourceGroupId) {
        return a.sourceGroupId.localeCompare(b.sourceGroupId);
      }

      // Convert to date-only (YYYY-MM-DD)
      const dateA = new Date(a.commissionDate);
      const dateB = new Date(b.commissionDate);

      const dayA = dateA.getFullYear() * 10000 + (dateA.getMonth() + 1) * 100 + dateA.getDate();
      const dayB = dateB.getFullYear() * 10000 + (dateB.getMonth() + 1) * 100 + dateB.getDate();

      if (dayA !== dayB) {
        return dayA - dayB;
      }

      return (a.level ?? 0) - (b.level ?? 0);
    }) ?? [];


  const groupedBySourceGroup = processedBonusDetails.reduce((acc, detail) => {
    const group = detail.sourceGroupId || "Unknown";
    if (!acc[group]) {
      acc[group] = {
        sourceAmount: detail.sourceAmount,
        details: []
      };
    }
    acc[group].details.push(detail);
    return acc;
  }, {});


  if (loading) return <DataLoading />;
  if (error) return <DataError error={error} />;

  return <>
    {Object.keys(groupedBySourceGroup).length === 0 ? (
      <EmptyContent title="No commissions generated" text="There were no commissions generated by this order" />
    ) : (
      Object.entries(groupedBySourceGroup).map(([groupId, group]) => (
        <div key={groupId}>
          <div className="card-header">
            <h3 className="card-title">Volume: {groupId}</h3>
          </div>
          <div className="table-responsive mb-3">
            <table className="table card-table table-vcenter text-nowrap datatable table-ellipsis">
              <thead>
                <tr>
                  <th>Paid to Customer</th>
                  <th>Customer Id</th>
                  <th>Bonus Title</th>
                  <th>Level</th>
                  <th>Amount</th>
                  <th>Percent</th>
                  <th>Commission Date</th>
                </tr>
              </thead>
              <tbody>
                {group.details.map((detail, index) => (
                  <tr key={index}>
                    <td>
                      <a className="text-reset" href={`/customers/${detail.customer?.id}/commissions/${encodeURIComponent(detail.bonusId)}?periodId=${detail.periodId}`}>
                        {detail.customer?.fullName}
                      </a>
                    </td>
                    <td>
                      <a className="text-reset" href={`/customers/${detail.customer?.id}/commissions/${encodeURIComponent(detail.bonusId)}?periodId=${detail.periodId}`}>
                        {detail.customer?.id}
                      </a>
                    </td>
                    <td>{detail.bonusTitle}</td>
                    <td>{detail.level}</td>
                    <td>{detail.amount.toLocaleString("en-US", { style: 'currency', currency: detail?.currency ?? 'USD' })}</td>
                    <td>{detail.percent}</td>
                    <td><LocalDate dateString={detail.commissionDate} hideTime={true} /></td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      ))
    )}
  </>
}

export default OrderDetailBonuses;

OrderDetailBonuses.propTypes = {
  orderId: PropTypes.string.isRequired
}
